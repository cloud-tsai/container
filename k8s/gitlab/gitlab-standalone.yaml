apiVersion: v1
kind: Namespace
metadata:
  name: gitlab

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-config
  namespace: gitlab
data:
  gitlab.rb: |
    gitlab_rails['ldap_enabled'] = true
    gitlab_rails['ldap_servers'] = YAML.load <<-'EOS'
      main:
        label: 'LDAP'
        host: 'ldap.example.com'
        port: 389
        uid: 'uid'
        bind_dn: 'uid=zimbra,cn=admins,cn=zimbra'
        password: 'password'
        encryption: 'plain'
        base: 'ou=people,dc=example,dc=com'
    EOS
    
    gitlab_rails['smtp_enable'] = true
    gitlab_rails['smtp_address'] = "example.com"
    gitlab_rails['smtp_port'] = 587
    gitlab_rails['smtp_user_name'] = "cloudtsai"
    gitlab_rails['smtp_password'] = "password"
    gitlab_rails['smtp_domain'] = "example.com"
    gitlab_rails['smtp_authentication'] = "plain"
    gitlab_rails['smtp_enable_starttls_auto'] = false
    gitlab_rails['smtp_tls'] = false
    gitlab_rails['smtp_openssl_verify_mode'] = 'none'

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    volume.beta.kubernetes.io/storage-provisioner: bill-jc.com/nfs
  name: pvc-gitlab
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: managed-nfs-storage

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gitlab
  namespace: gitlab
  labels:
    app: gitlab
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs:     ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs:     ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs:     ["get", "create"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab
  namespace: gitlab
  labels:
    app: gitlab

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: gitlab
  namespace: gitlab
subjects:
- kind: ServiceAccount
  name: gitlab
  namespace: gitlab
roleRef:
  kind: ClusterRole
  name: gitlab
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Service
metadata:
  name: gitlab
  namespace: gitlab
spec:
  ports:
  - name: httpport
    port: 80
    protocol: TCP
    targetPort: 80
  - name: httpsport
    port: 443
    protocol: TCP
    targetPort: 443
  - name: sshport
    port: 22
    protocol: TCP
    targetPort: 22
  selector:
    app: gitlab

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gitlab
  name: gitlab
  namespace: gitlab
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab
  template:
    metadata:
      labels:
        app: gitlab
    spec:
      serviceAccountName: gitlab
      initContainers:
      - name: init-gitlab
        image: busybox:1.31.0
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          if [[ ! -e /etc/gitlab/gitlab.rb ]]; then cp /data/gitlab/gitlab.rb /etc/gitlab/gitlab.rb && chmod 0600 /etc/gitlab/gitlab.rb; fi
        volumeMounts:
        - name: gitlab-data
          mountPath: /etc/gitlab
          subPath: glconfig
        - mountPath: /data/gitlab
          name: gitlab-config
      containers:
      - name: gitlab
        image: gitlab/gitlab-ce:12.4.0-ce.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: httpport
          containerPort: 80
          protocol: TCP
        - name: httpsport
          containerPort: 443
          protocol: TCP
        - name: sshport
          containerPort: 22
          protocol: TCP
#        readinessProbe:
#          initialDelaySeconds: 300
#          timeoutSeconds: 5
#          tcpSocket:
#            port: 80
        env:
        - name: GITLAB_OMNIBUS_CONFIG
          value: "external_url 'http://gitlab.10.100.254.176.xip.io'"
        stdin: true
        tty: true
        volumeMounts:
        - name: gitlab-data
          mountPath: /var/opt/gitlab
          subPath: gldata
        - name: gitlab-data
          mountPath: /etc/gitlab
          subPath: glconfig
        - name: gitlab-logs
          mountPath: /var/log/gitlab
        securityContext:
          privileged: true
      volumes:
      - name: gitlab-logs
        emptyDir: {}
      - name: gitlab-config
        configMap:
          name: gitlab-config
          items:
          - key: gitlab.rb
            path: gitlab.rb
## FEATURE:PERSISTENT
      - name: gitlab-data
        persistentVolumeClaim:
          claimName: pvc-gitlab
## FEATURE:WITHOUT PERSISTENT
#      - name: gitlab-data
#        emptyDir: {}

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gitlab
  namespace: gitlab
spec:
  rules:
  - host: gitlab.10.100.254.176.xip.io
    http:
      paths:
      - backend:
          serviceName: gitlab
          servicePort: 80
        path: /
