apiVersion: v1
kind: ConfigMap
metadata:
  name: hrsaasdb-config
data:
  master.cnf: |
    # Apply this config only on the master.
    [mysqld]
    log-bin
    skip_name_resolve
    #character_set_server=utf8mb4
    #collation_server=utf8mb4_unicode_ci
  slave.cnf: |
    # Apply this config only on slaves.
    [mysqld]
    super-read-only
    skip_name_resolve
    #character_set_server=utf8mb4
    #collation_server=utf8mb4_unicode_ci
  server-id.cnf: |
    [mysqld]
    server-id=@@SERVER_ID@@
  create-replication-user.sh: |-
    #!/bin/bash
    set -e
    mysql -h 127.0.0.1 --verbose -e "CREATE USER IF NOT EXISTS '${MYSQL_REPLICATION_USER}' IDENTIFIED BY '${MYSQL_REPLICATION_PASSWORD}';"
    mysql -h 127.0.0.1 --verbose -e "GRANT PROCESS, RELOAD, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '${MYSQL_REPLICATION_USER}';"
    mysql -h 127.0.0.1 --verbose -e "FLUSH PRIVILEGES;"
    
---
apiVersion: v1
kind: Secret
metadata:
  name: hrsaasdb-secret
type: Opaque
data:
  mysql-root-password: cm9vdA==  #root
  mysql-password: aHJzYWFz #hrsaas
  mysql-replication-password: cmVwbA== #repl

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hrsaasdb
  labels:
    app: hrsaasdb
spec:
  serviceName: hrsaasdb
  selector:
    matchLabels:
      app: hrsaasdb
  replicas: 3
  template:
    metadata:
      labels:
        app: hrsaasdb
    spec:
      initContainers:
      - name: clone-mysql
        image: registry.cn-hangzhou.aliyuncs.com/kubeapps/gcr-xtrabackup:1.0
        imagePullPolicy: IfNotPresent
        command:
          - bash
          - "-c"
          - |
            set -ex
            # Skip the clone on master (ordinal index 0).
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            [[ $ordinal -eq 0 ]] && exit 0

            # If data already exists, delete and proceed to clone.
            [[ -d /var/lib/mysql/mysql ]] && rm -fr /var/lib/mysql/*

            # Clone data from previous peer.
            ncat --recv-only hrsaasdb-$(($ordinal-1)).hrsaasdb 3307 | xbstream -x -C /var/lib/mysql
            # Prepare the backup.
            xtrabackup --prepare --user=${MYSQL_REPLICATION_USER} --password=${MYSQL_REPLICATION_PASSWORD} --target-dir=/var/lib/mysql
        env:
        - name: MYSQL_REPLICATION_USER
          value: repl
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hrsaasdb-secret
              key: mysql-replication-password
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      - name: init-mysql
        image: mysql:5.7.13
        imagePullPolicy: IfNotPresent
        command: ["/bin/bash"]
        args:
          - "-c"
          - |
            set -ex
            # Generate mysql server-id from pod ordinal index.
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            # Copy server-id.conf adding offset to avoid reserved server-id=0 value.
            cat /mnt/config-map/server-id.cnf | sed s/@@SERVER_ID@@/$((100 + $ordinal))/g > /mnt/conf.d/server-id.cnf
            # Copy appropriate conf.d files from config-map to config mount.
            if [[ $ordinal -eq 0 ]]; then
              cp -f /mnt/config-map/master.cnf /mnt/conf.d/
            else
              cp -f /mnt/config-map/slave.cnf /mnt/conf.d/
            fi
            # Copy replication user script
            if [[ $ordinal -eq 0 ]]; then
              cp -f /mnt/config-map/create-replication-user.sh /mnt/scripts/create-replication-user.sh
              chmod 700 /mnt/scripts/create-replication-user.sh
            fi
        volumeMounts:
          - name: conf
            mountPath: /mnt/conf.d
          - name: config-map
            mountPath: /mnt/config-map
          - name: scripts
            mountPath: /mnt/scripts
      containers:
      - name: mysql
        image: mysql:5.7.13
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_DATABASE
          value: hrsaas
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hrsaasdb-secret
              key: mysql-root-password
        - name: MYSQL_REPLICATION_USER
          value: repl
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hrsaasdb-secret
              key: mysql-replication-password
        - name: MYSQL_USER
          value: hrsaas
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hrsaasdb-secret
              key: mysql-password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
#        resources:
#          requests:
#            cpu: 100m
#            memory: 256Mi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - "-c"
            - mysqladmin ping -h 127.0.0.1 -u root -p${MYSQL_ROOT_PASSWORD}
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command:
            - /bin/sh
            - "-c"
            - MYSQL_PWD="${MYSQL_ROOT_PASSWORD}"
            - mysql -h 127.0.0.1 -u root -e "SELECT 1"
          initialDelaySeconds: 10
          timeoutSeconds: 1
      - name: xtrabackup
        image: registry.cn-hangzhou.aliyuncs.com/kubeapps/gcr-xtrabackup:1.0
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: hrsaasdb-secret
              key: mysql-root-password
        - name: MYSQL_REPLICATION_USER
          value: repl
        - name: MYSQL_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hrsaasdb-secret
              key: mysql-replication-password
        ports:
        - name: xtrabackup
          containerPort: 3307
        command: ["/bin/bash"]
        args:
          - "-c"
          - |
            set -ex

            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 5; done

            # Create replication user
            cd /mnt/scripts
            # file exists and is not empty with -s
            if [[ -s create-replication-user.sh  ]]; then
              ls -la
              ./create-replication-user.sh
            fi

            cd /var/lib/mysql
            # Determine binlog position of cloned data, if any.
            if [[ -f xtrabackup_slave_info ]]; then
              # XtraBackup already generated a partial "CHANGE MASTER TO" query
              # because we're cloning from an existing slave.
              cp xtrabackup_slave_info change_master_to.sql.in
            elif [[ -f xtrabackup_binlog_info ]]; then
              # We're cloning directly from master. Parse binlog position.
              [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
              echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                    MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
            fi

            # Check if we need to complete a clone by starting replication.
            if [[ -f change_master_to.sql.in ]]; then

              # In case of container restart, attempt this at-most-once.
              cp change_master_to.sql.in change_master_to.sql.orig
              mysql -h 127.0.0.1 --verbose<<EOF
              STOP SLAVE IO_THREAD;
              $(<change_master_to.sql.orig),
              MASTER_HOST='hrsaasdb-0.hrsaasdb',
              MASTER_USER='${MYSQL_REPLICATION_USER}',
              MASTER_PASSWORD='${MYSQL_REPLICATION_PASSWORD}',
              MASTER_CONNECT_RETRY=10;
              START SLAVE;
            EOF
            fi

            # Start a server to send backups when requested by peers.
            exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
              "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=${MYSQL_REPLICATION_USER} --password=${MYSQL_REPLICATION_PASSWORD}"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: scripts
          mountPath: /mnt/scripts
        resources:
          requests:
            cpu: 100m
            memory: 100Mi

      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: hrsaasdb-config
      - name: scripts
        emptyDir: {}
#      - name: data
#        emptyDir: {}

  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      storageClassName: nfs-client

---
apiVersion: v1
kind: Service
metadata:
  name: hrsaasdb
  labels:
    app: hrsaasdb
spec:
  ports:
  - name: hrsaasdb
    port: 3306
  clusterIP: None
  selector:
    app: hrsaasdb

---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the master: mysql-0.mysql.

#apiVersion: v1
#kind: Service
#metadata:
#  name: hrsaasdb-readonly
#  labels:
#    app: hrsaasdb
#spec:
#  ports:
#  - name: hrsaasdb
#    port: 3306
#  selector:
#    app: hrsaasdb